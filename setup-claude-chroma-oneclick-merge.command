#!/usr/bin/env bash
# Claude-Chroma One-Click Setup for macOS (Fixed Version)
# Just double-click this file to set up ChromaDB for this directory!
# Version: 3.5.3-oneclick-fixed

set -euo pipefail

# Get the directory where this script is located (where user double-clicked)
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_DIR="$SCRIPT_DIR"
PROJECT_NAME="$(basename "$PROJECT_DIR")"

# Colors for output
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly RED='\033[0;31m'
readonly NC='\033[0m'
readonly BOLD='\033[1m'

# Create temporary directory for extraction
TEMP_DIR="$(mktemp -d)"
trap "rm -rf '$TEMP_DIR'" EXIT

clear
echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${YELLOW}🚀 Claude-Chroma One-Click Setup${NC}"
echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo ""
echo -e "${BLUE}Setting up ChromaDB for:${NC}"
echo "  📁 Project: $PROJECT_NAME"
echo "  📍 Location: $PROJECT_DIR"
echo ""
echo "Please wait while we configure everything automatically..."
echo ""

# Extract embedded claude-chroma.sh
echo -e "${BLUE}⏳ Extracting setup script...${NC}"
base64 -d > "$TEMP_DIR/claude-chroma.sh" <<'SCRIPT_BASE64'

SCRIPT_BASE64
chmod +x "$TEMP_DIR/claude-chroma.sh"

# Extract template
echo -e "${BLUE}⏳ Extracting template...${NC}"
mkdir -p "$PROJECT_DIR/templates"
base64 -d > "$PROJECT_DIR/templates/CLAUDE.md.tpl" <<'TEMPLATE_BASE64'
IyBDTEFVREUubWQg4oCUIFByb2plY3QgQ29udHJhY3QKCioqUHVycG9zZSoqOiBGb2xsb3cgdGhpcyBpbiBldmVyeSBzZXNzaW9uIGZvciB0aGlzIHJlcG8uIEtlZXAgbWVtb3J5IHNoYXJwLiBLZWVwIG91dHB1dHMgY29uY3JldGUuIEN1dCByZXdvcmsuCgojIyDwn6egIFByb2plY3QgTWVtb3J5IChDaHJvbWEpClVzZSBzZXJ2ZXIgYGNocm9tYWAuIENvbGxlY3Rpb24gYCR7UFJPSkVDVF9DT0xMRUNUSU9OfWAuCgpMb2cgYWZ0ZXIgYW55IGNvbmZpcm1lZCBmaXgsIGRlY2lzaW9uLCBnb3RjaGEsIG9yIHByZWZlcmVuY2UuCgoqKlNjaGVtYToqKgotICoqZG9jdW1lbnRzKio6IDHigJMyIHNlbnRlbmNlcy4gVW5kZXIgMzAwIGNoYXJzLgotICoqbWV0YWRhdGFzKio6IGB7ICJ0eXBlIjoiZGVjaXNpb258Zml4fHRpcHxwcmVmZXJlbmNlIiwgInRhZ3MiOiJjb21tYSxzZXBhcmF0ZWQiLCAic291cmNlIjoiZmlsZXxQUnxzcGVjfGlzc3VlIiB9YAotICoqaWRzKio6IHN0YWJsZSBzdHJpbmcgaWYgdXBkYXRpbmcgdGhlIHNhbWUgZmFjdC4KCiMjIyBDaHJvbWEgQ2FsbHMKYGBgamF2YXNjcmlwdAovLyBDcmVhdGUgb25jZToKbWNwX19jaHJvbWFfX2Nocm9tYV9jcmVhdGVfY29sbGVjdGlvbiB7ICJjb2xsZWN0aW9uX25hbWUiOiAiJHtQUk9KRUNUX0NPTExFQ1RJT059IiB9CgovLyBBZGQ6Cm1jcF9fY2hyb21hX19jaHJvbWFfYWRkX2RvY3VtZW50cyB7CiAgImNvbGxlY3Rpb25fbmFtZSI6ICIke1BST0pFQ1RfQ09MTEVDVElPTn0iLAogICJkb2N1bWVudHMiOiBbIjx0ZXh0PiJdLAogICJtZXRhZGF0YXMiOiBbeyJ0eXBlIjoiPHR5cGU+IiwidGFncyI6ImEsYixjIiwic291cmNlIjoiPHNyYz4ifV0sCiAgImlkcyI6IFsiPHN0YWJsZS1pZD4iXQp9CgovLyBRdWVyeSAoc3RhcnQgd2l0aCA1OyBlc2NhbGF0ZSBvbmx5IGlmIDwzIHN0cm9uZyBoaXRzKToKbWNwX19jaHJvbWFfX2Nocm9tYV9xdWVyeV9kb2N1bWVudHMgewogICJjb2xsZWN0aW9uX25hbWUiOiAiJHtQUk9KRUNUX0NPTExFQ1RJT059IiwKICAicXVlcnlfdGV4dHMiOiBbIjxxdWVyeT4iXSwKICAibl9yZXN1bHRzIjogNQp9CmBgYAoKIyMg8J+UjSBSZXRyaWV2YWwgQ2hlY2tsaXN0IEJlZm9yZSBDb2RpbmcKMS4gUXVlcnkgQ2hyb21hIGZvciByZWxhdGVkIG1lbW9yaWVzLgoyLiBDaGVjayByZXBvIGZpbGVzIHRoYXQgbWF0Y2ggdGhlIHRhc2suCjMuIExpc3Qgb3BlbiBQUnMgb3IgaXNzdWVzIHRoYXQgdG91Y2ggdGhlIHNhbWUgYXJlYS4KNC4gT25seSB0aGVuIHByb3Bvc2UgY2hhbmdlcy4KCiMjIOKaoSBBY3RpdmF0aW9uClJlYWQgdGhpcyBmaWxlIGF0IHNlc3Npb24gc3RhcnQuClRoZW4gcmVhZCBgLmNocm9tYS9jb250ZXh0LyoubWRgICh0aXRsZXMgKyBmaXJzdCBidWxsZXRzKSBhbmQgbGlzdCB3aGljaCBvbmVzIHlvdSB1c2VkLgpSdW4gYGJpbi9jaHJvbWEtc3RhdHMucHlgIGFuZCBhbm5vdW5jZTogKipDb250cmFjdCBsb2FkZWQuIFVzaW5nIENocm9tYSAke1BST0pFQ1RfQ09MTEVDVElPTn0uIEZvdW5kIFtOXSBtZW1vcmllcyAoYnkgdHlwZSAuLi4pLioqCgojIyDwn6e5IFNlc3Npb24gSHlnaWVuZQpQcnVuZSB0byBsYXN0IDIwIHR1cm5zIGlmIGNvbnRleHQgZ2V0cyBoZWF2eS4gU2F2ZSBsb25nIG91dHB1dHMgaW4gYC4vYmFja3Vwcy9gIGFuZCBlY2hvIHBhdGhzLgoKIyMg8J+TgSBPdXRwdXQgUG9saWN5CkZvciBjb2RlLCByZXR1cm4gdW5pZmllZCBkaWZmIG9yIHBhdGNoYWJsZSBmaWxlcy4gRm9yIHNjcmlwdHMsIGluY2x1ZGUgZXhhY3QgY29tbWFuZHMgYW5kIHBhdGhzLgoKIyMg8J+boe+4jyBTYWZldHkKTm8gc2VjcmV0cyBpbiBgLmNocm9tYWAgb3IgdHJhbnNjcmlwdHMuIFJlc3BlY3QgcmF0ZSBsaW1pdHMuIFByb3Bvc2UgYmF0Y2hpbmcgaWYgbmVlZGVkLg==
TEMPLATE_BASE64

echo -e "${GREEN}✓${NC} Files ready"
echo ""

# Run the setup script in non-interactive mode
echo -e "${BLUE}🔧 Configuring ChromaDB for your project...${NC}"
cd "$PROJECT_DIR"

# Run with all auto-yes flags, but capture success/failure
SETUP_SUCCESS=false
if env NON_INTERACTIVE=1 ASSUME_YES=1 "$TEMP_DIR/claude-chroma.sh" 2>&1 | while IFS= read -r line; do
    # Filter for important messages
    echo "$line" | sed 's/\x1b\[[0-9;]*m//g' | grep -E "(✓|Created|Configured|Complete|Warning|Error)" || true
done; then
    SETUP_SUCCESS=true
fi

if [ "$SETUP_SUCCESS" = true ]; then
    echo ""
    echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${GREEN}✨ Setup Complete!${NC}"
    echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo ""
    echo -e "${GREEN}ChromaDB has been configured for:${NC}"
    echo "  📁 ${BOLD}$PROJECT_NAME${NC}"
    echo "  🧠 Collection: ${BOLD}${PROJECT_NAME}_memory${NC}"
    echo "  📍 Location: ${BOLD}$PROJECT_DIR${NC}"
    echo ""

    # Create optional launcher (but don't auto-run it)
    LAUNCHER_FILE="$PROJECT_DIR/launch-claude-here.command"
    cat > "$LAUNCHER_FILE" << LAUNCHER_SCRIPT
#!/usr/bin/env bash
# Launch Claude in this project directory with ChromaDB
cd "$PROJECT_DIR"
echo -e "\033[1;34m🚀 Starting Claude with ChromaDB...\033[0m"
echo "Project: $PROJECT_NAME"
echo "Location: $PROJECT_DIR"
echo ""
exec claude
LAUNCHER_SCRIPT
    chmod +x "$LAUNCHER_FILE"

    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${BLUE}📋 Next Steps:${NC}"
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo ""

    if command -v claude >/dev/null 2>&1; then
        echo -e "${GREEN}✅ Claude CLI is installed and ready!${NC}"
        echo ""
        echo -e "${BOLD}Option 1: Use the Launcher (Easiest!)${NC}"
        echo "  We created a launcher for you:"
        echo -e "  → Double-click: ${BLUE}launch-claude-here.command${NC}"
        echo ""
        echo -e "${BOLD}Option 2: Use Terminal${NC}"
        echo "  Open Terminal and run:"
        echo -e "  ${BLUE}cd \"$PROJECT_DIR\" && claude${NC}"
        echo ""
    else
        echo -e "${YELLOW}⚠  Claude CLI not installed yet${NC}"
        echo ""
        echo -e "${BOLD}To complete setup:${NC}"
        echo "  1. Install Claude from: ${BLUE}https://claude.ai/download${NC}"
        echo "  2. Then either:"
        echo "     → Double-click: ${BLUE}launch-claude-here.command${NC}"
        echo "     → Or run in Terminal: ${BLUE}claude${NC}"
        echo ""
    fi

    echo -e "${GREEN}✨ Your project now has persistent memory with ChromaDB!${NC}"
else
    echo ""
    echo -e "${RED}❌ Setup encountered an issue${NC}"
    echo ""
    echo "To troubleshoot:"
    echo "  1. Check prerequisites:"
    echo "     - jq installed: ${BLUE}brew install jq${NC}"
    echo "     - uvx installed: ${BLUE}pip install --user uv${NC}"
    echo "  2. Try manual setup:"
    echo "     ${BLUE}cd \"$PROJECT_DIR\"${NC}"
    echo "     Download claude-chroma.sh and run it"
    echo ""
fi

echo ""
echo -e "${YELLOW}Press Enter to close this window...${NC}"
read -r

# Script ends here - no automatic Claude launch that would cause TTY issues
